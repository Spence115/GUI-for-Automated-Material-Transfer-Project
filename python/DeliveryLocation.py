# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DeliveryLocation.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox,QTableWidget,QTableWidget
from PyQt5.QtSql import QSqlDatabase, QSqlTableModel
from PyQt5.QtWidgets import *
from PyQt5.QtGui  import *
from PyQt5.QtCore import *

delivBuilding = ""
confDBuilding = False

class Ui_DeliveryLocation(object):
    def setupUi(self, DeliveryLocation):
        DeliveryLocation.setObjectName("DeliveryLocation")
        DeliveryLocation.resize(800, 500)
        self.centralwidget = QtWidgets.QWidget(DeliveryLocation)
        self.centralwidget.setObjectName("centralwidget")
        self.delLoc2 = QtWidgets.QPushButton(self.centralwidget)
        self.delLoc2.setGeometry(QtCore.QRect(320, 180, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.delLoc2.setFont(font)
        self.delLoc2.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.delLoc2.setObjectName("delLoc2")
        self.confirmDelBtn = QtWidgets.QPushButton(self.centralwidget)
        self.confirmDelBtn.setGeometry(QtCore.QRect(250, 370, 311, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.confirmDelBtn.setFont(font)
        self.confirmDelBtn.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.confirmDelBtn.setObjectName("confirmDelBtn")
        self.delLoc3 = QtWidgets.QPushButton(self.centralwidget)
        self.delLoc3.setGeometry(QtCore.QRect(320, 260, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.delLoc3.setFont(font)
        self.delLoc3.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.delLoc3.setObjectName("delLoc3")
        self.statusLabel = QtWidgets.QLabel(self.centralwidget)
        self.statusLabel.setGeometry(QtCore.QRect(210, 30, 401, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.statusLabel.setFont(font)
        self.statusLabel.setStyleSheet("")
        self.statusLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.statusLabel.setObjectName("statusLabel")
        self.delLoc1 = QtWidgets.QPushButton(self.centralwidget)
        self.delLoc1.setGeometry(QtCore.QRect(320, 100, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.delLoc1.setFont(font)
        self.delLoc1.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.delLoc1.setObjectName("delLoc1")
        self.DLLabel = QtWidgets.QLabel(self.centralwidget)
        self.DLLabel.setGeometry(QtCore.QRect(210, 320, 401, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.DLLabel.setFont(font)
        self.DLLabel.setStyleSheet("")
        self.DLLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.DLLabel.setObjectName("DLLabel")   
        DeliveryLocation.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(DeliveryLocation)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        DeliveryLocation.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(DeliveryLocation)
        self.statusbar.setObjectName("statusbar")
        DeliveryLocation.setStatusBar(self.statusbar)

        self.retranslateUi(DeliveryLocation)
        QtCore.QMetaObject.connectSlotsByName(DeliveryLocation)

    # Button triggers here
        
        self.delLoc1.clicked.connect(lambda: self.clicked("Building 1"))
        self.delLoc2.clicked.connect(lambda: self.clicked("Building 2"))
        self.delLoc3.clicked.connect(lambda: self.clicked("Building 3"))

        self.confirmDelBtn.clicked.connect(lambda: self.clicked("Confirm"))
    # end button triggers

    def retranslateUi(self, DeliveryLocation):
        _translate = QtCore.QCoreApplication.translate
        DeliveryLocation.setWindowTitle(_translate("DeliveryLocation", "MainWindow"))
        self.delLoc2.setText(_translate("DeliveryLocation", "Building 2"))
        self.confirmDelBtn.setText(_translate("DeliveryLocation", "Confirm Delivery Location"))
        self.delLoc3.setText(_translate("DeliveryLocation", "Building 3"))
        self.statusLabel.setText(_translate("DeliveryLocation", "Please select a Delivery Location"))
        self.delLoc1.setText(_translate("DeliveryLocation", "Building 1"))
        self.DLLabel.setText(_translate("DeliveryLocation", "Current Delivery Location: "))

    def clicked(self, text):
        global DLWindow
        global delivBuilding

        confDBuilding = False

        if text == "Building 1":
            print("Building 1 selected")
            delivBuilding = text
        if text == "Building 2":
            print("Building 2 selected")
            delivBuilding = text
        if text == "Building 3":
            print("Building 3 selected")
            delivBuilding = text
        if text == "Confirm":
            print("Confirmed delivery")
            self.DLLabel.setText("Will deliver merchandise to " + delivBuilding)
            self.DLLabel.adjustSize()
            self.DLLabel.setAlignment(Qt.AlignCenter)
            self.insertDL(delivBuilding)
            confDBuilding = True

        if confDBuilding == False:
            self.DLLabel.setText("Current Delivery Location: " + delivBuilding)
            self.DLLabel.adjustSize()
            self.DLLabel.setAlignment(Qt.AlignCenter)
            
    def insertDL(self,l):
        curRow = self.whichRow()
        
        DLcon = sqlite3.connect("Z:\BPT.db")

        print("connected for insert DL\n")

        cursor = DLcon.cursor()

        insLoc = "UPDATE tasks SET Delivery_Location ='"+l+"' WHERE row_ID = "+curRow+";"

        cursor.execute(insLoc)
        DLcon.commit()
        DLcon.close()

    def whichRow(self):
        con = sqlite3.connect("Z:\BPT.db")
        cellCon = con.cursor()

        cellCon.execute('SELECT Current_Row FROM states')
        data = cellCon.fetchone()
        rw = str(data[0])
        print("Current_Row is:" + str(rw))
        return rw

    def startUp():
        global DLWindow
        app = QtWidgets.QApplication(sys.argv)
        DLWindow = QtWidgets.QMainWindow()
        ui = Ui_DeliveryLocation()
        ui.setupUi(DLWindow)
        DLWindow.show()
        sys.exit(app.exec_())

class SQL_Table(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Delivery Request Window")
        self.resize(1200, 200)
        # Set up the model
        self.model = QSqlTableModel(self)
        self.model.setTable("tasks")
        self.model.setEditStrategy(QSqlTableModel.OnFieldChange)
        self.model.setHeaderData(0, Qt.Horizontal, "Work_Order")
        self.model.setHeaderData(1, Qt.Horizontal, "QTY")
        self.model.setHeaderData(2, Qt.Horizontal, "Pickup_Location")
        self.model.setHeaderData(3, Qt.Horizontal, "Delivery_Location")
        self.model.select()
        # Set up the view
        self.view = QTableView()
        self.view.setModel(self.model)
        self.view.resizeColumnsToContents()
        self.setCentralWidget(self.view)

    # Creates the GUI's connection to the SQLite database on the Raspberry Pi
    def createConnection():
        con = QSqlDatabase.addDatabase("QSQLITE")
        # Sets the file path of the SQL Database file
        # **Note**: Change this to the path of your SQL database located on your local network drive
        con.setDatabaseName("Z:\BPT.db")
        if not con.open():
            # Returns the following message if program fails to connect to database
            QMessageBox.critical(
                None,
                "QTableView Example - Error!",
                "Database Error: %s" % con.lastError().databaseText(),
            )
            return False
        return True

if __name__ == "__main__":
    Ui_DeliveryLocation.startUp()

if not SQL_Table.createConnection():
    sys.exit(1)
DB_win = SQL_Table()
