#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BPTGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox,QTableWidget,QTableWidget
from PyQt5.QtSql import QSqlDatabase, QSqlTableModel
from PyQt5.QtWidgets import *
from PyQt5.QtGui  import *
from PyQt5.QtCore import *
import time as t

from datetime import time
from datetime import datetime


# Used to keep track of the state of the system
# stateOfSystem = 0 means "Idle"
# stateOfSystem = 1 means "Needs unplugging"
# stateOfSystem = 2 means "Picking Up at Building X", where X is the Pickup Location entered by the operator
# stateOfSystem = 3 means "Needs Loading"
# stateOfSystem = 4 means "Delivering to Building Y", where Y is the Delivery Location entered by the operator
# stateOfSystem = 5 means "Needs unloading"
# stateOfSystem = 6 means "Navigating to charging station"
# stateOfSystem = 7 means "Needs plugging in"
# stateOfSystem = 8 means "Charging"
# stateOfSystem = 9 means "Pickup location navigation error"
# stateOfSystem = 10 means "Delivery location navigation error"
# stateOfSystem = 11 means "Charging Station navigation error"

global stateOfSystem
stateOfSystem = str(0)

# Used to keep track of the state of the Warthog's battery
# batteryStatus = 0 means "Insufficient Battery"
# batteryStatus = 1 means "Sufficient Battery"
# batteryStatus = 2 means "Fully Charged"

global batteryStatus
batteryStatus = 1

# Used to track the current row number
# It is used when filling in the time stamp table. Tells what row to reference
global rowCounter
rowCounter = 0

# Used to track the current column number
# It is used when filling in the time stamp table. Tells what column to reference
global colCounter
colCounter = 0

# Boolean used to track if the pallet is on the trailer or not
global isLoaded
isLoaded = False

# Ints used to tell what the current pickup and delivery locations are 
global pickupLoc
global delivLoc

lockedDeliv = True

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # Initialize the state of the system
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Work order table
        self.workOrderTable = QtWidgets.QTableWidget(self.centralwidget)
        self.workOrderTable.setEnabled(False)
        self.workOrderTable.setGeometry(QtCore.QRect(20, 150, 561, 441))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.workOrderTable.setFont(font)
        self.workOrderTable.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.workOrderTable.setFrameShadow(QtWidgets.QFrame.Plain)
        self.workOrderTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.workOrderTable.setGridStyle(QtCore.Qt.SolidLine)
        self.workOrderTable.setCornerButtonEnabled(False)
        self.workOrderTable.setRowCount(100)
        self.workOrderTable.setColumnCount(4)
        self.workOrderTable.setObjectName("workOrderTable")
        item = QtWidgets.QTableWidgetItem()
        self.workOrderTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.workOrderTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.workOrderTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.workOrderTable.setHorizontalHeaderItem(3, item)
        self.workOrderTable.horizontalHeader().setSortIndicatorShown(False)

        # Request delivery
        self.requestBtn = QtWidgets.QPushButton(self.centralwidget)
        self.requestBtn.setGeometry(QtCore.QRect(590, 150, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.requestBtn.setFont(font)
        self.requestBtn.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.requestBtn.setObjectName("requestBtn")
        self.simulationVrsnLabel = QtWidgets.QLabel(self.centralwidget)
        self.simulationVrsnLabel.setGeometry(QtCore.QRect(1660, 10, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.simulationVrsnLabel.setFont(font)
        self.simulationVrsnLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.simulationVrsnLabel.setObjectName("simulationVrsnLabel")

        # Load pallet
        self.loadPalletBtn = QtWidgets.QPushButton(self.centralwidget)
        self.loadPalletBtn.setGeometry(QtCore.QRect(1320, 140, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.loadPalletBtn.setFont(font)
        self.loadPalletBtn.setObjectName("loadPalletBtn")

        # Unload pallet
        self.unloadPalletBtn = QtWidgets.QPushButton(self.centralwidget)
        self.unloadPalletBtn.setGeometry(QtCore.QRect(1320, 210, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.unloadPalletBtn.setFont(font)
        self.unloadPalletBtn.setObjectName("unloadPalletBtn")

        # Warthog charging status
        self.pluggedInBtn = QtWidgets.QPushButton(self.centralwidget)
        self.pluggedInBtn.setGeometry(QtCore.QRect(1620, 140, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.pluggedInBtn.setFont(font)
        self.pluggedInBtn.setObjectName("pluggedInBtn")
        self.fullyChargedBtn = QtWidgets.QPushButton(self.centralwidget)
        self.fullyChargedBtn.setGeometry(QtCore.QRect(1620, 280, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.fullyChargedBtn.setFont(font)
        self.fullyChargedBtn.setStyleSheet("background-color: rgb(60, 240, 0)")
        self.fullyChargedBtn.setObjectName("fullyChargedBtn")
        self.insufficientBatteryBtn = QtWidgets.QPushButton(self.centralwidget)
        self.insufficientBatteryBtn.setGeometry(QtCore.QRect(1620, 420, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.insufficientBatteryBtn.setFont(font)
        self.insufficientBatteryBtn.setStyleSheet("background-color: rgb(255, 40, 40)")
        self.insufficientBatteryBtn.setObjectName("insufficientBatteryBtn")
        self.sufficientBatteryBtn = QtWidgets.QPushButton(self.centralwidget)
        self.sufficientBatteryBtn.setGeometry(QtCore.QRect(1620, 350, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.sufficientBatteryBtn.setFont(font)
        self.sufficientBatteryBtn.setStyleSheet("background-color: rgb(251, 255, 0)")
        self.sufficientBatteryBtn.setObjectName("sufficientBatteryBtn")
        self.unpluggedBtn = QtWidgets.QPushButton(self.centralwidget)
        self.unpluggedBtn.setGeometry(QtCore.QRect(1620, 210, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.unpluggedBtn.setFont(font)
        self.unpluggedBtn.setObjectName("unpluggedBtn")
        self.navToPickupFailBtn = QtWidgets.QPushButton(self.centralwidget)
        self.navToPickupFailBtn.setGeometry(QtCore.QRect(1620, 550, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.navToPickupFailBtn.setFont(font)
        self.navToPickupFailBtn.setObjectName("navToPickupFailBtn")
        self.navToDelivFailBtn = QtWidgets.QPushButton(self.centralwidget)
        self.navToDelivFailBtn.setGeometry(QtCore.QRect(1620, 620, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.navToDelivFailBtn.setFont(font)
        self.navToDelivFailBtn.setObjectName("navToDelivFailBtn")

        # Battery
        self.batteryRelatedLabel = QtWidgets.QLabel(self.centralwidget)
        self.batteryRelatedLabel.setGeometry(QtCore.QRect(1650, 100, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.batteryRelatedLabel.setFont(font)
        self.batteryRelatedLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.batteryRelatedLabel.setObjectName("batteryRelatedLabel")
        self.operatorActionsLabel = QtWidgets.QLabel(self.centralwidget)
        self.operatorActionsLabel.setGeometry(QtCore.QRect(1350, 100, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.operatorActionsLabel.setFont(font)
        self.operatorActionsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.operatorActionsLabel.setObjectName("operatorActionsLabel")
        self.failuresLabel = QtWidgets.QLabel(self.centralwidget)
        self.failuresLabel.setGeometry(QtCore.QRect(1650, 510, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.failuresLabel.setFont(font)
        self.failuresLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.failuresLabel.setObjectName("failuresLabel")
        self.statusLabel = QtWidgets.QLabel(self.centralwidget)
        self.statusLabel.setGeometry(QtCore.QRect(10, 0, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.statusLabel.setFont(font)
        self.statusLabel.setStyleSheet("")
        self.statusLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.statusLabel.setObjectName("statusLabel")
        self.navToChargFailBtn = QtWidgets.QPushButton(self.centralwidget)
        self.navToChargFailBtn.setGeometry(QtCore.QRect(1620, 690, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.navToChargFailBtn.setFont(font)
        self.navToChargFailBtn.setObjectName("navToChargFailBtn")
        self.operatorTableLabel = QtWidgets.QLabel(self.centralwidget)
        self.operatorTableLabel.setGeometry(QtCore.QRect(70, 590, 441, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.operatorTableLabel.setFont(font)
        self.operatorTableLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.operatorTableLabel.setObjectName("operatorTableLabel")
        self.timestampTable = QtWidgets.QTableWidget(self.centralwidget)
        self.timestampTable.setEnabled(False)
        self.timestampTable.setGeometry(QtCore.QRect(710, 150, 561, 441))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.timestampTable.setFont(font)
        self.timestampTable.setRowCount(100)
        self.timestampTable.setObjectName("timestampTable")
        self.timestampTable.setColumnCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.timestampTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.timestampTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.timestampTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.timestampTable.setHorizontalHeaderItem(3, item)
        self.payloadStatusLabel = QtWidgets.QLabel(self.centralwidget)
        self.payloadStatusLabel.setGeometry(QtCore.QRect(10, 50, 301, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.payloadStatusLabel.setFont(font)
        self.payloadStatusLabel.setStyleSheet("")
        self.payloadStatusLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.payloadStatusLabel.setObjectName("payloadStatusLabel")
        self.manualUnloadBtn = QtWidgets.QPushButton(self.centralwidget)
        self.manualUnloadBtn.setGeometry(QtCore.QRect(1320, 280, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.manualUnloadBtn.setFont(font)
        self.manualUnloadBtn.setObjectName("manualUnloadBtn")
        self.batStatusLabel = QtWidgets.QLabel(self.centralwidget)
        self.batStatusLabel.setGeometry(QtCore.QRect(1240, 690, 331, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.batStatusLabel.setFont(font)
        self.batStatusLabel.setStyleSheet("")
        self.batStatusLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.batStatusLabel.setObjectName("batStatusLabel")
        self.workOrderBtn = QtWidgets.QPushButton(self.centralwidget)
        self.workOrderBtn.setGeometry(QtCore.QRect(20, 650, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.workOrderBtn.setFont(font)
        self.workOrderBtn.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.workOrderBtn.setObjectName("workOrderBtn")
        self.choosePLBtn = QtWidgets.QPushButton(self.centralwidget)
        self.choosePLBtn.setGeometry(QtCore.QRect(20, 790, 201, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.choosePLBtn.setFont(font)
        self.choosePLBtn.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.choosePLBtn.setObjectName("choosePLBtn")
        self.chooseDLBtn = QtWidgets.QPushButton(self.centralwidget)
        self.chooseDLBtn.setGeometry(QtCore.QRect(20, 860, 201, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.chooseDLBtn.setFont(font)
        self.chooseDLBtn.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.chooseDLBtn.setObjectName("chooseDLBtn")
        self.selectQtyBtn = QtWidgets.QPushButton(self.centralwidget)
        self.selectQtyBtn.setGeometry(QtCore.QRect(20, 720, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.selectQtyBtn.setFont(font)
        self.selectQtyBtn.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.selectQtyBtn.setObjectName("selectQtyBtn")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1924, 19))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionSave)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.confirmCurrentWorkOrderBtn = QtWidgets.QPushButton(self.centralwidget)
        self.confirmCurrentWorkOrderBtn.setGeometry(QtCore.QRect(300, 860, 311, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.confirmCurrentWorkOrderBtn.setFont(font)
        self.confirmCurrentWorkOrderBtn.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.confirmCurrentWorkOrderBtn.setObjectName("confirmCurrentWorkOrderBtn")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Button triggers here

        self.requestBtn.pressed.connect(lambda: self.pressed("Status: Needs unplugging"))
        self.unpluggedBtn.pressed.connect(lambda: self.pressed("Status: Picking Up at " + pickupLoc))
        self.loadPalletBtn.pressed.connect(lambda: self.pressed("Status: Delivering to " + delivLoc))
        self.unloadPalletBtn.pressed.connect(lambda: self.pressed("Status: Navigating to charging station"))
        self.pluggedInBtn.pressed.connect(lambda: self.pressed("Status: Charging"))
        self.fullyChargedBtn.pressed.connect(lambda: self.pressed("Status: Idle"))
        self.insufficientBatteryBtn.pressed.connect(lambda: self.pressed("Insufficient Battery"))
        self.sufficientBatteryBtn.pressed.connect(lambda: self.pressed("Sufficient Battery"))
        self.navToPickupFailBtn.pressed.connect(lambda: self.popup_window("Status: Navigation to pickup location failed"))
        self.navToDelivFailBtn.pressed.connect(lambda: self.popup_window("Status: Navigation to delivery location failed"))
        self.navToChargFailBtn.pressed.connect(lambda: self.popup_window("Status: Navigation to charging station failed"))
        self.manualUnloadBtn.pressed.connect(lambda: self.pressed("Manual Unload"))
        self.confirmCurrentWorkOrderBtn.pressed.connect(lambda: self.pressed("Confirm Delivery WO"))
        
        self.choosePLBtn.pressed.connect(self.openPLWindow)
        self.chooseDLBtn.pressed.connect(self.openDLWindow)
        self.selectQtyBtn.pressed.connect(self.openQtyWindow)
        self.workOrderBtn.pressed.connect(self.openWOWindow)
# end button triggers 

    def checkIfEditable(self):
        if self.payloadStatusLabel.text() == "Payload on Trailer? - YES":
            isLoaded = True

        if  stateOfSystem == "0" or stateOfSystem == "6" or stateOfSystem == "7" or stateOfSystem == "8" and \
            isLoaded == False:
            print("if ran")
            lockedDeliv = False
            print(lockedDeliv)
        else:
            print("else ran")
            lockedDeliv = True
            print(lockedDeliv)
        
        return lockedDeliv       
   
    def openWOWindow(self):
        from WorkOrder import Ui_WorkOrder
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_WorkOrder()
        self.ui.setupUi(self.window)
        self.window.show() 

    def openQtyWindow(self):
        from Quantity import Ui_MainWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def openPLWindow(self):
        from PickupLocation import Ui_PLWindow
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_PLWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def openDLWindow(self):
        from DeliveryLocation import Ui_DeliveryLocation
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_DeliveryLocation()
        self.ui.setupUi(self.window)
        self.window.show()
        
    def checkGPS(self):
        import coordinates as cd
        x = cd.track()
        return x

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.workOrderTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Work Order #"))
        item = self.workOrderTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "QTY"))
        item = self.workOrderTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Pickup Location"))
        item = self.workOrderTable.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Delivery Location"))
        self.requestBtn.setText(_translate("MainWindow", "Request"))
        self.simulationVrsnLabel.setText(_translate("MainWindow", "Prototype Version"))
        self.loadPalletBtn.setText(_translate("MainWindow", "Load Pallet"))
        self.unloadPalletBtn.setText(_translate("MainWindow", "Unload Pallet"))
        self.pluggedInBtn.setText(_translate("MainWindow", "Plugged In"))
        self.fullyChargedBtn.setText(_translate("MainWindow", "Fully Charged"))
        self.insufficientBatteryBtn.setText(_translate("MainWindow", "Insufficient Battery"))
        self.sufficientBatteryBtn.setText(_translate("MainWindow", "Sufficient Battery"))
        self.unpluggedBtn.setText(_translate("MainWindow", "Unplugged"))
        self.navToPickupFailBtn.setText(_translate("MainWindow", "Navigation to pickup failed"))
        self.navToDelivFailBtn.setText(_translate("MainWindow", "Navigation to delivery failed"))
        self.batteryRelatedLabel.setText(_translate("MainWindow", "Battery Related"))
        self.operatorActionsLabel.setText(_translate("MainWindow", "Operator Actions"))
        self.failuresLabel.setText(_translate("MainWindow", "Failures"))
        self.statusLabel.setText(_translate("MainWindow", "Status: Idle"))
        self.navToChargFailBtn.setText(_translate("MainWindow", "Navigation to charging failed"))
        self.operatorTableLabel.setText(_translate("MainWindow", "Enter Delivery Information Below:"))
        item = self.timestampTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Arrival Time"))
        item = self.timestampTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Loaded Time"))
        item = self.timestampTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Delivered Time"))
        item = self.timestampTable.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Unloaded TIme"))
        self.payloadStatusLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#0066ff;\">Payload on Trailer? - No</span></p></body></html>"))
        self.manualUnloadBtn.setText(_translate("MainWindow", "Manual Unload"))
        self.batStatusLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#f3cf00;\">Battery Status: Sufficient</span></p></body></html>"))
        self.workOrderBtn.setText(_translate("MainWindow", "Enter Work Order #"))
        self.choosePLBtn.setText(_translate("MainWindow", "Choose Pickup Location"))
        self.chooseDLBtn.setText(_translate("MainWindow", "Choose Delivery Location"))
        self.selectQtyBtn.setText(_translate("MainWindow", "Select Quantity"))
        self.confirmCurrentWorkOrderBtn.setText(_translate("MainWindow", "Confirm Delivery #" + self.readCell(0,7,"states")))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionNew.setStatusTip(_translate("MainWindow", "Create a new file"))
        self.actionNew.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionCopy.setStatusTip(_translate("MainWindow", "Copy a file"))
        self.actionCopy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionPaste.setStatusTip(_translate("MainWindow", "Paste a file"))
        self.actionPaste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave.setStatusTip(_translate("MainWindow", "Save a file"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))

    # Function that changes the text to the current state
    # Gets called every time a button is pressed
    # When implemented in the final version, this routine will be exectued every "X" amount of seconds,
    # where every "X" seconds the needed values are read from the SQL database such that they can be used
    # in replacement of what the buttons would be simulating. 
    def pressed(self, text):
        # references all global variables to be used in this function
        global stateOfSystem
        global batteryStatus
        global rowCounter
        global colCounter
        global isLoaded
        global pickupLoc
        global delivLoc
        # The Q indicates this is a queued delivery being entered into the work order table. It isn't 
        # the same as the current pickup and delivery locations being serviced
        global QpickupLoc
        global QdelivLoc
        global QQty
        global QWO

        btnPressed = True
        # Reads the current time for use in the Time Stamp table
        currentTime = datetime.time(datetime.now())
        formattedTime = currentTime.strftime("%I:%M:%S %p")
        

        for i in range(4):
            self.workOrderTable.setItem(rowCounter, i, QTableWidgetItem(self.readCell(rowCounter,i,"work order")))
            self.timestampTable.setItem(rowCounter, i, QTableWidgetItem(self.readCell(rowCounter,i,"time stamp")))
            print(i)

        # Reads current state of system from the database
        stateOfSystem = str(self.checkState())
        print("Initial state is: " + stateOfSystem)

        # Updates the battery status if the Sufficient Battery button is pressed at any time
        if      btnPressed == True and batteryStatus != 1 and \
                text == "Sufficient Battery":
            batteryStatus = 1
            btnPressed = False

        # Updates the current delivery's pickup and delivery location
        pickupLoc = self.readCell(rowCounter,2,"work order")
        delivLoc = self.readCell(rowCounter,3,"work order")

        # Requests to to be unplugged if a delivery is scheduled and the following conditions are met
        if      stateOfSystem == "0" and \
                self.statusLabel.text() == "Status: Idle" and text == "Status: Needs unplugging" and \
                pickupLoc != "None" and delivLoc != "None" and btnPressed == True:
            if pickupLoc == delivLoc:
                print("ERROR: Cannot have pickup and delivery location the same!")
                self.popup_window("Same locations")
            else:
                # Updates the status accordingly
                stateOfSystem = 1
                # Print statements in terminal for debugging purposes
                print(stateOfSystem)
                print("State 0 to 1")
                # Updates the status label accordingly and corrects the size
                self.statusLabel.setText(text)
                self.statusLabel.adjustSize()
                # Prints status label for debugging purposes
                print(self.statusLabel.text())
                # sets btnPressed to false so that subsequent if statements can't be triggered
                btnPressed = False
        
        # Attends to the next delivery if it has finished the previous delivery and has enough battery to do so
        elif    stateOfSystem == "6" and batteryStatus != 0 and \
                self.statusLabel.text() == "Status: Navigating to charging station" and text == "Status: Needs unplugging" and \
                btnPressed == True and isLoaded == False:
            
            stateOfSystem = "2"
            print(stateOfSystem)
            print("State 6 to 2")
            self.statusLabel.setText("Status: Picking Up at " + pickupLoc)
            self.statusLabel.adjustSize()
            print(self.statusLabel.text())
            btnPressed = False

        # Starts navigating to the pickup location if the "Unplugged" button is pressed
        elif    stateOfSystem == "1" and \
                self.statusLabel.text() == "Status: Needs unplugging" and text == "Status: Picking Up at " + pickupLoc and \
                btnPressed == True:
            # Carries out normal procedure
            if isLoaded == False:
                                        
                stateOfSystem = "2"
                print(stateOfSystem)
                print("State 1 to 2")
                self.statusLabel.setText(text)
                self.statusLabel.adjustSize()
                print(self.statusLabel.text())
                QApplication.processEvents()
                
                atLocation = False

                while(atLocation == False):
                    buildingStatus = self.checkGPS()
                    #building1status = self.checkBldg1()
                    buildingStatus = "Building " + str(buildingStatus)
                    print(buildingStatus)
                    if buildingStatus == pickupLoc:
                        atLocation = True
                    elif buildingStatus != pickupLoc:
                        print("Waiting for right pickup location...")
                
                print("exited while")

                # Indicates the Warthog needs to be loaded once it has reached the pickup location
                if    stateOfSystem == "2" and \
                    self.statusLabel.text() == "Status: Picking Up at " + pickupLoc and \
                    btnPressed == True:
                    
                    print("if was true")
                    
                    stateOfSystem = "3"
                    print(stateOfSystem)
                    print("State 2 to 3")
                    self.statusLabel.setText("Status: Needs loading")
                    self.statusLabel.adjustSize()
                    print(self.statusLabel.text())
                    # Fills in first col cell of timeStampTable
                    self.insertTime(formattedTime, rowCounter, colCounter)
                    self.timestampTable.setItem(rowCounter, colCounter, QTableWidgetItem(self.readCell(rowCounter,colCounter,"time stamp")))
                    btnPressed = False
                    # Increments column counter by one so that the next time the time stamp table is filled in 
                    # the data is logged in the correct cell
                    colCounter = colCounter + 1
                
                
                
                btnPressed = False
            # Occurs if Warthog is leaving from charging station with pallet still on it
            elif isLoaded == True:
                stateOfSystem = 4
                colCounter = 2
                print(stateOfSystem)
                print("State 3 to 4")
                self.statusLabel.setText("Status: Delivering to " + delivLoc)
                self.statusLabel.adjustSize()
                print(self.statusLabel.text())
                btnPressed = False
        
        # Starts navigating to the delivery location after being loaded with a pallet
        elif    stateOfSystem == "3" and \
                self.statusLabel.text() == "Status: Needs loading" and text == "Status: Delivering to " + delivLoc and \
                btnPressed == True:
            stateOfSystem = "4"
            print(stateOfSystem)
            print("State 3 to 4")
            
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            print(self.statusLabel.text())
            # Fills in second col cell of timeStampTable
            self.insertTime(formattedTime, rowCounter, colCounter)
            self.timestampTable.setItem(rowCounter, colCounter, QTableWidgetItem(self.readCell(rowCounter,colCounter,"time stamp")))
            colCounter = colCounter + 1
            # Updates pallet status boolean indicating that the pallet is on the trailer
            isLoaded = True
        
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            print(self.statusLabel.text())

            # btnPressed = False
            self.payloadStatusLabel.setText("<html><head/><body><p><span style=\" color:#FC0000;\">Payload on Trailer? - YES</span></p></body></html>")
            self.payloadStatusLabel.adjustSize()
            QApplication.processEvents()
            
            atLocation = False
            while(atLocation == False):
                buildingStatus = self.checkGPS()
                #building1status = self.checkBldg1()
                buildingStatus = "Building " + str(buildingStatus)
                print(buildingStatus)
                if buildingStatus == delivLoc:
                    atLocation = True
                elif buildingStatus != delivLoc:
                    print("Waiting for right delivery location...")
            
            print("exited while")
        
            # Indicates the Warthog needs to be unloaded after arriving at the delivery location
            if    stateOfSystem == "4" and \
                    self.statusLabel.text() == "Status: Delivering to " + delivLoc and \
                    btnPressed == True:
                stateOfSystem = "5"
                print(stateOfSystem)
                print("State 4 to 5")
                self.statusLabel.setText("Status: Needs unloading")
                self.statusLabel.adjustSize()
                print(self.statusLabel.text())
                # Fills in third col cell of timeStampTable
                self.insertTime(formattedTime, rowCounter, colCounter)
                self.timestampTable.setItem(rowCounter, colCounter, QTableWidgetItem(self.readCell(rowCounter,colCounter,"time stamp")))
                colCounter = colCounter + 1
                btnPressed = False
        
        # Returns to the charging station to await another delivery request after being unloaded
        elif    stateOfSystem == "5" and \
                self.statusLabel.text() == "Status: Needs unloading" and text == "Status: Navigating to charging station" and \
                btnPressed == True:

                # This if statement reads true if there is another work order scheduled (i.e the next row in SQL has no empty cells)
            if  self.readCell((rowCounter+1),0,"work order") != "None" and self.readCell((rowCounter+1),1,"work order") != "None" and \
                self.readCell((rowCounter+1),2,"work order") != "None" and self.readCell((rowCounter+1),3,"work order") != "None":
                # Services the next delivery if there is one 
                # Fills in fourth col cell of timeStampTable
                self.insertTime(formattedTime, rowCounter, colCounter)
                self.timestampTable.setItem(rowCounter, colCounter, QTableWidgetItem(self.readCell(rowCounter,colCounter,"time stamp")))
                # Updates pallet status boolean indicating that the pallet is no longer on the trailer
                isLoaded = False
                # increments rowCounter by 1 since delivery has been completed
                rowCounter  = rowCounter + 1
                self.setRow(rowCounter)
                # resets colCounter to be ready for fresh delivery
                colCounter = 0

                pickupLoc = self.readCell(rowCounter,2,"work order")
                delivLoc = self.readCell(rowCounter,3,"work order")

                stateOfSystem = "2"
                print(stateOfSystem)
                print("State 5 to 2")
                self.statusLabel.setText("Status: Picking Up at " + pickupLoc)
                self.statusLabel.adjustSize()
            
            if    stateOfSystem == "2" and \
                self.statusLabel.text() == "Status: Picking Up at " + pickupLoc and \
                btnPressed == True:
                
                print("if was true")
                
                stateOfSystem = "3"
                print(stateOfSystem)
                print("State 2 to 3")
                self.statusLabel.setText("Status: Needs loading")
                self.statusLabel.adjustSize()
                print(self.statusLabel.text())
                # Fills in first col cell of timeStampTable
                self.insertTime(formattedTime, rowCounter, colCounter)
                self.timestampTable.setItem(rowCounter, colCounter, QTableWidgetItem(self.readCell(rowCounter,colCounter,"time stamp")))
                btnPressed = False
                # Increments column counter by one so that the next time the time stamp table is filled in 
                # the data is logged in the correct cell
                colCounter = colCounter + 1

            else:

                    stateOfSystem = "6"
                    print(stateOfSystem)
                    print("State 5 to 6")
                    self.statusLabel.setText(text)
                    self.statusLabel.adjustSize()
                    print(self.statusLabel.text())
                    # Fills in fourth col cell of timeStampTable
                    self.insertTime(formattedTime, rowCounter, colCounter)
                    self.timestampTable.setItem(rowCounter, colCounter, QTableWidgetItem(self.readCell(rowCounter,colCounter,"time stamp")))
                    # Updates pallet status boolean indicating that the pallet is no longer on the trailer
                    isLoaded = False
                    # increments rowCounter by 1 since delivery has been completed
                    rowCounter  = rowCounter + 1
                    self.setRow(rowCounter)
                    # resets colCounter to be ready for fresh delivery
                    colCounter = 0
                    # btnPressed = False
                    self.payloadStatusLabel.setText("<html><head/><body><p><span style=\" color:#0066ff;\">Payload on Trailer? - NO</span></p></body></html>")
                    self.payloadStatusLabel.adjustSize()
                    QApplication.processEvents()
                    
                    atLocation = False
                    
                    while(atLocation == False):
                        buildingStatus = self.checkGPS()
                        buildingStatus = "Building " + str(buildingStatus)
                        print(buildingStatus)
                        if buildingStatus == "Building 4":
                            atLocation = True
                        elif buildingStatus != "Building 4":
                            print("Waiting for right pickup location...")
                    
                    print("exited while")

                    if    stateOfSystem == "6" and \
                            self.statusLabel.text() == "Status: Navigating to charging station" and \
                            btnPressed == True:
                        stateOfSystem = "7"
                        print(stateOfSystem)
                        print("State 6 to 7")
                        self.statusLabel.setText("Status: Needs plugging in")
                        self.statusLabel.adjustSize()
                        print(self.statusLabel.text())
                        btnPressed = False
                        print(btnPressed)
        
        # Indicates that the Warthog is charging after the operator plugs it in
        elif    stateOfSystem == "7" and \
                self.statusLabel.text() == "Status: Needs plugging in" and text == "Status: Charging" and \
                btnPressed == True:
            stateOfSystem = "8"
            print(stateOfSystem)
            print("State 7 to 8")
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            print(self.statusLabel.text())
            btnPressed = False
        
        # Triggers when battery is fully charged and changes state to Idle
        elif    stateOfSystem == "8" and \
                self.statusLabel.text() == "Status: Charging" and text == "Status: Idle" and \
                btnPressed == True:
            stateOfSystem = "0"
            print(stateOfSystem)
            print("State 8 to 0")
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            print(self.statusLabel.text())
            batteryStatus = 2
            btnPressed = False
        
        # Triggers next deliv if system has enough battery and another deliv has been requested
        elif    (stateOfSystem == "0" or stateOfSystem == "7" or stateOfSystem == "8") and \
                batteryStatus == "1" and  btnPressed == True and\
                text == "Status: Needs unplugging":
            stateOfSystem = "1"
            print(stateOfSystem)
            print("State 1")
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            print(self.statusLabel.text())
            btnPressed = False
        
        # Goes to charging station if insufficient battery is read during delivery process
        elif    stateOfSystem != "7" and stateOfSystem != "8" and \
                stateOfSystem != "9" and stateOfSystem != "10" and stateOfSystem != "11":
            
            # Handles case when insufficient battery occurs when Idle
            if      stateOfSystem == "0" and btnPressed == True and \
                    text == "Insufficient Battery" and text != "Manual Unload":
                stateOfSystem = "8"
                self.statusLabel.setText("Status: Charging")
                self.statusLabel.adjustSize()
                print(self.statusLabel.text())
                batteryStatus = 0
                btnPressed = False
            # Handles case when the battery goes too low after sitting in the "Needs unplugging" state for too long
            # -- Example: Operator requests a delivery, but no one unlugs the Warthog for 30 minutes. Now the Warthog has 
            # -- too low of a battery level to service this delivery. Hence, it switches back to charging until it is 
            # -- full enough to service the delivery.
            elif    stateOfSystem == "1" and btnPressed == True and \
                    self.statusLabel.text() == "Status: Needs unplugging" and text == "Insufficient Battery":
                stateOfSystem = "8"
                self.statusLabel.setText("Status: Charging")
                self.statusLabel.adjustSize()
                print(self.statusLabel.text())
                batteryStatus = 0
                btnPressed = False

            # Handles case when Warthog's battery falls too low during any part of the delivery process
            elif btnPressed == True and text != "Manual Unload" and text == "Insufficient Battery":
                stateOfSystem = "6"
                print(stateOfSystem)
                print("State 6")
                self.statusLabel.setText("Status: Navigating to charging station")
                self.statusLabel.adjustSize()
                print(self.statusLabel.text())
                batteryStatus = 0
                btnPressed = False
        
        # Updates label for if the payload is on the trailer or not
        if isLoaded == False:
            self.payloadStatusLabel.setText("<html><head/><body><p><span style=\" color:#0066ff;\">Payload on Trailer? - NO</span></p></body></html>")
            self.payloadStatusLabel.adjustSize()
            btnPressed = False
        
        # Allows the operator to manually unload the merchandise from the trailer if the Warthog is at the charging station
        # This could occur if the "Insufficient Battery" takes place during the delivery process BEFORE the Warthog is unloaded
        if    (stateOfSystem == "0" or stateOfSystem == "1" or stateOfSystem == "7" or stateOfSystem == "8") and \
                btnPressed == True and isLoaded == True and \
                text == "Manual Unload":
            # Indicates the trialer is no longer loaded
            self.payloadStatusLabel.setText("<html><head/><body><p><span style=\" color:#0066ff;\">Payload on Trailer? - NO</span></p></body></html>")
            self.payloadStatusLabel.adjustSize()
            btnPressed = False
            isLoaded = False
            # fills out rest of timestamps and readies table for next delivery
            # Checks to see if less than 3, because when at 3 the final column cell has already been filled out
            if colCounter < 4:
                notFilled = True
                while(notFilled == True):
                    manualTimeStamp = "ML:" + formattedTime
                    # Fills in the remaining cells. "ML: " indicates that the merchandise was manually unloaded
                    self.insertTime(manualTimeStamp, rowCounter, colCounter)
                    self.timestampTable.setItem(rowCounter, colCounter, QTableWidgetItem(self.readCell(rowCounter,colCounter,"time stamp")))
                    # increments column counter to next column
                    colCounter = colCounter + 1
                    # reads true if all columns have been filled
                    if colCounter == 4:
                        # resets boolean to break out of while() loop
                        notFilled = False
                        # resets column counter for a fresh delivery
                        colCounter = 0
                        # increments row conuter for the next delivery
                        rowCounter = rowCounter + 1
            
        # Updates the payload status label if there is merchandise on the trailer
        elif isLoaded == True:
            self.payloadStatusLabel.setText("<html><head/><body><p><span style=\" color:#FC0000;\">Payload on Trailer? - YES</span></p></body></html>")
            self.payloadStatusLabel.adjustSize()
        
        # Updates the battery status label based on the current battery state
        if batteryStatus == 0:
            # Changes to red colored "insufficient"
            self.batStatusLabel.setText("<html><head/><body><p><span style=\" color:#FF0000;\">Battery Status: Insufficient</span></p></body></html>")
            self.batStatusLabel.adjustSize()
        elif batteryStatus == 1:
            # Changes to yellow colored "sufficient"
            self.batStatusLabel.setText("<html><head/><body><p><span style=\" color:#f3cf00;\">Battery Status: Sufficient</span></p></body></html>")
            self.batStatusLabel.adjustSize()
        elif batteryStatus == 2:
            # Changes to green colored "fully charged"
            self.batStatusLabel.setText("<html><head/><body><p><span style=\" color:#27EC00;\">Battery Status: Fully Charged</span></p></body></html>")
            self.batStatusLabel.adjustSize()
        
        # After going through all possible scenarios, updates the state of the system to the database
        print("Setting state to: " + str(stateOfSystem))
        self.setState(stateOfSystem)

        if self.payloadStatusLabel.text() == "Payload on Trailer? - YES":
            isLoaded = True

        if text == "Confirm Delivery WO":
            print("confirming WO")
            rowID = int(self.readCell(0,7,"states")) - 1
            print("row ID:" + str(rowID))
            QpickupLoc = self.readCell(rowID,2,"work order")
            print("queued PL: " + QpickupLoc)
            QdelivLoc = self.readCell(rowID,3,"work order")
            print("queued DL: " + QdelivLoc)
            QQty = self.readCell(rowID,1,"work order")
            print("queued Quantity: " + QQty)
            QWO = self.readCell(rowID,0,"work order")
            print("queued Work Order: " + QWO)

            if(QpickupLoc == "None" or QdelivLoc == "None" or QQty == "None" or QWO == "None"):
                print("One of the fields is empty!")


            elif    QpickupLoc != QdelivLoc and \
                    QpickupLoc != "None" and QdelivLoc != "None" and QQty != "None" and QWO != "None":
            # Fills out work order info on the delivery being scheduled into the GUI's work order table
                for i in range(4):
                    self.workOrderTable.setItem(rowID, i, QTableWidgetItem(self.readCell(rowID,i,"work order")))

                delivNum = self.readCell(0,7,"states")
                print("delivNum is: " + delivNum)
                self.setDelivNum(delivNum)
                self.confirmCurrentWorkOrderBtn.setText("Confirm Delivery #" + self.readCell(0,7,"states"))
                print(self.readCell(0,7,"states"))
            elif(QpickupLoc == QdelivLoc):
                self.popup_window("Same locations")
        
    # end of states


    # function used for all popup windows
    def popup_window(self, text):
        global stateOfSystem
        global batteryStatus
        global pickupLoc
        global delivLoc
        # Creates error window if Warthog failed to reach the delivery location
        if stateOfSystem == "2" and self.statusLabel.text() == "Status: Picking Up at " + pickupLoc and text == "Status: Navigation to pickup location failed":
            pickupFailMsg = QMessageBox()
            pickupFailMsg.setWindowTitle("NAVIGATION TO PICKUP LOCATION HAS FAILED")
            pickupFailMsg.setText("Navigation to the pickup location has failed! **OPERATOR SERVICE REQUIRED**")
            # Assigns the type of icon
            # All options include: information, warning, critical, and question
            pickupFailMsg.setIcon(QMessageBox.Critical)
            # Provides all buttons that will show up in the popup window
            # Options are Ok, Open, Save, Cancel, Close, Yes, No, Abort, Retry, and Ignore
            pickupFailMsg.setStandardButtons(QMessageBox.Ok)
            # Highlight the default button on popup
            # Default button will be clicked automatically if user presses "enter"
            pickupFailMsg.setDefaultButton(QMessageBox.Ok)
            # An additional message that is printed below the main text
            pickupFailMsg.setInformativeText("Navigation to Building " + pickupLoc + " has failed. Please use Futaba controller to guide Warthog back to charging station ASAP.")
            # Provides and additional details button containing further text
            pickupFailMsg.buttonClicked.connect(self.popup_button)
            # updates status label text
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            # updates state of system 
            stateOfSystem = "9"
            print(stateOfSystem)
            # generates the popup window
            showpickupFailMsg = pickupFailMsg.exec_()
        # Creates error window if Warthog failed to reach the delivery location
        elif stateOfSystem == "4" and self.statusLabel.text() == "Status: Delivering to " + delivLoc and text == "Status: Navigation to delivery location failed":
            delivFailMsg = QMessageBox()
            delivFailMsg.setWindowTitle("NAVIGATION TO DELIVERY LOCATION HAS FAILED")
            delivFailMsg.setText("Navigation to the delivery location has failed! **OPERATOR SERVICE REQUIRED**")
            delivFailMsg.setIcon(QMessageBox.Critical)
            delivFailMsg.setStandardButtons(QMessageBox.Ok)
            delivFailMsg.setDefaultButton(QMessageBox.Ok)
            delivFailMsg.setInformativeText("Navigation to Building " + delivLoc + " has failed. Please use Futaba controller to guide Warthog back to charging station ASAP.")
            delivFailMsg.buttonClicked.connect(self.popup_button)
            # updates status label text
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            # updates state of system 
            stateOfSystem = "10"
            print(stateOfSystem)
            # generates the popup window
            showdelivFailMsg = delivFailMsg.exec_()
        # Creates error window if Warthog failed to reach the charging station
        elif stateOfSystem == "6" and self.statusLabel.text() == "Status: Navigating to charging station" and text == "Status: Navigation to charging station failed":
            chargeFailMsg = QMessageBox()
            chargeFailMsg.setWindowTitle("NAVIGATION TO CHARGING STATION HAS FAILED")
            chargeFailMsg.setText("Navigation to the charging location has failed! **OPERATOR SERVICE REQUIRED**")
            chargeFailMsg.setIcon(QMessageBox.Critical)
            chargeFailMsg.setStandardButtons(QMessageBox.Ok)
            chargeFailMsg.setDefaultButton(QMessageBox.Ok)
            chargeFailMsg.setInformativeText("Please use Futaba controller to guide Warthog back to charging station ASAP.")
            chargeFailMsg.buttonClicked.connect(self.popup_button)
            # updates status label text
            self.statusLabel.setText(text)
            self.statusLabel.adjustSize()
            # updates state of system 
            stateOfSystem = "11"
            print(stateOfSystem)
            # generates the popup window
            showchargeFailMsg = chargeFailMsg.exec_()
        # Displays popup window if request was pressed and the pickup and delivery locations are the same
        elif text == "Same locations":
            sameLocation = QMessageBox()
            sameLocation.setWindowTitle("CANNOT HAVE SAME DELIVERY AND PICKUP LOCATION")
            sameLocation.setText("The same building locations have been selected for the current request.")
            sameLocation.setIcon(QMessageBox.Warning)
            sameLocation.setStandardButtons(QMessageBox.Ok)
            sameLocation.setDefaultButton(QMessageBox.Ok)
            sameLocation.setInformativeText("A new delivery and pickup location must be selected. Please re-enter the information using the buttons provided.")
            sameLocation.buttonClicked.connect(self.popup_button)

            sameLocationPopup = sameLocation.exec_()
    # end of popup window function

    # 'i' is the widget that we clicked. Allows us to tell which button the operator pressed
    def popup_button(self, i):
        print(i.text())

    # d represents the delivery number of the work order being entered
    def setDelivNum(self,d):
        con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
        print("connected for set set delivery number\n")
        cur = con.cursor()

        insVal = "UPDATE states SET Row_ID_WO_Input =" + d + ";"

        cur.execute(insVal)
        con.commit()
        con.close()


    def setRow(self,s):
        s = str(s)
        con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
        print("connected for set row\n")
        cur = con.cursor()

        insRow = "UPDATE states SET Current_Row ="+s+";"

        cur.execute(insRow)
        con.commit()
        con.close()

    def setState(self,s):
        s = str(s)
        con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
        print("connected for set state\n")
        cur = con.cursor()

        insState = "UPDATE states SET State_Of_System ="+s+";"

        cur.execute(insState)
        con.commit()
        con.close()

    def checkState(self):
        con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
        cellCon = con.cursor()

        cellCon.execute('SELECT State_Of_System FROM states')
        data = cellCon.fetchone()
        st = str(data[0])
        print("SQL state is:" + str(st))
        return st

    def insertTime(self,t,r,c):
        timeCon = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")

        print("connected for timestamp\n")

        cursor = timeCon.cursor()
        if c == 0:
            insTimeStamp = "UPDATE tasks SET Arrived_Time ='"+t+"' WHERE row_ID = "+str(r)+";"
        if c == 1:
            insTimeStamp = "UPDATE tasks SET Loaded_Time ='"+t+"' WHERE row_ID = "+str(r)+";"
        if c == 2:
            insTimeStamp = "UPDATE tasks SET Delivered_Time ='"+t+"' WHERE row_ID = "+str(r)+";"
        if c == 3:
            insTimeStamp = "UPDATE tasks SET Unloaded_Time ='"+t+"' WHERE row_ID = "+str(r)+";"

        cursor.execute(insTimeStamp)
        timeCon.commit()
        timeCon.close()
    
    def checkBldg1(self):
        con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
        cellCon = con.cursor()

        cellCon.execute('SELECT BLDG_1 FROM states')
        data = cellCon.fetchone()
        st = str(data[0])
        print("BLDG_1  is " + str(st))
        return st
    
    # Reads cells from database and updates table accordingly
    # r is for current row, c is for current col
    def readCell(self,r,c,whichTable):
        if whichTable == "time stamp":
            con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
            cellCon = con.cursor()
            if c == 0:
                cellCon.execute('SELECT Arrived_Time FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            elif c == 1:
                cellCon.execute('SELECT Loaded_Time FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            elif c == 2:
                cellCon.execute('SELECT Delivered_Time FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            elif c == 3:
                cellCon.execute('SELECT Unloaded_Time FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            print(tStmp)
            return tStmp
        
        if whichTable == "work order":
            con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
            cellCon = con.cursor()
            if c == 0:
                cellCon.execute('SELECT Work_Order FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            elif c == 1:
                cellCon.execute('SELECT QTY FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            elif c == 2:
                cellCon.execute('SELECT Pickup_Location FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            elif c == 3:
                cellCon.execute('SELECT Delivery_Location FROM tasks')
                data = cellCon.fetchall()
                tup = data[r]
                tStmp = str(tup[0])
            print(tStmp)
            return tStmp
        
        if whichTable == "states":
            con = sqlite3.connect("/home/pi/NetworkDrive/BPT.db")
            cellCon = con.cursor()
            if c == 7:
                cellCon.execute('SELECT Row_ID_WO_Input FROM states')
                data = cellCon.fetchall()
                tup = data[r]
                delivNum = int(tup[0]) + 1
            print(delivNum)    
            return str(delivNum)

class SQL_Table(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Delivery Request Window")
        self.resize(1200, 200)
        # Set up the model
        self.model = QSqlTableModel(self)
        self.model.setTable("tasks")
        self.model.setEditStrategy(QSqlTableModel.OnFieldChange)
        self.model.setHeaderData(0, Qt.Horizontal, "Work_Order")
        self.model.setHeaderData(1, Qt.Horizontal, "QTY")
        self.model.setHeaderData(2, Qt.Horizontal, "Pickup_Location")
        self.model.setHeaderData(3, Qt.Horizontal, "Delivery_Location")
        self.model.select()
        # Set up the view
        self.view = QTableView()
        self.view.setModel(self.model)
        self.view.resizeColumnsToContents()
        self.setCentralWidget(self.view)

    # Creates the GUI's connection to the SQLite database on the Raspberry Pi
    def createConnection():
        con = QSqlDatabase.addDatabase("QSQLITE")
        # Sets the file path of the SQL Database file
        # **Note**: Change this to the path of your SQL database located on your local network drive
        con.setDatabaseName("/home/pi/NetworkDrive/BPT.db")
        if not con.open():
            # Returns the following message if program fails to connect to database
            QMessageBox.critical(
                None,
                "QTableView Example - Error!",
                "Database Error: %s" % con.lastError().databaseText(),
            )
            return False
        return True


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.setDelivNum("0")
    ui.confirmCurrentWorkOrderBtn.setText("Confirm Delivery #" + ui.readCell(0,7,"states"))

if not SQL_Table.createConnection():
    sys.exit(1)
DB_win = SQL_Table()
ui.setState(stateOfSystem)
ui.setRow("0")


sys.exit(app.exec_())
